// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb" 
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  email          String       @unique
  username       String
  hashedPassword String?
  emailVerified  DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  bio            String?
  profileImage   String?
  accounts       Account[]
  articles       Article[]    @relation("UserArticles")
  // articles  Article[]
  // collections Collection[]
}


model Account {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  type                String
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @db.ObjectId
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  oauth_token         String?
  oauth_token_secret  String?
  
  @@index([providerAccountId])
}



// model Collection {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   user      User     @relation(fields: [userId], references: [id])
//   userId    String  @db.ObjectId
//   articles  CollectionArticle[]
// }

// model CollectionArticle {
//   id            String     @id @default(auto()) @map("_id") @db.ObjectId
//   collectionId  String     @db.ObjectId
//   articleId     String     @db.ObjectId
//   collection    Collection @relation(fields: [collectionId], references: [id])
//   article       Article    @relation(fields: [articleId], references: [id])

//   @@unique([collectionId, articleId])
// }


// model Article {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   author  User     @relation(fields: [authorId], references: [id])
//   authorId String @db.ObjectId
//  collections    CollectionArticle[]
//   title        String?
//   created_at   DateTime?
//   content      String?
//   city         String?
//   class_type   String?
//   fee          Float?
//   found_year   Int?
//   mail         String?
//   class_name   String?
//   phone        String?
//   preface      String?
//   skill        String?
//   image_url    String?
//   teachWay     String?
//   teacherNum   Int?
//   technology   String?
//   topic        String?
//   totalDay     Int?
//   weekHour     Int?
// }

model Article {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  author          User      @relation(fields: [authorId], references: [id], name: "UserArticles")
  authorId        String    @db.ObjectId
  title           String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  className       String
  introduction    String
  classLocation   String
  classType       String
  fee             Float
  teachingMethod  String
  technology      String
  totalDays       Int
  weeklyHours     Int
  content         String
  imageUrl        String?
}

// model Article {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   title     String
//   content   String
//   authorId  String   @db.ObjectId
//   createdAt DateTime @default(now())
//   author    User     @relation(fields: [authorId], references: [id], name: "UserArticles")
// }



